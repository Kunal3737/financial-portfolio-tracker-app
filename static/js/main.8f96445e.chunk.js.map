{"version":3,"sources":["components/AllStocks.js","components/AddStocks.js","components/MyStocks.js","App.js","serviceWorker.js","index.js"],"names":["AllStocks","stopTrackingButtonClicked","event","index","setState","isClicked","props","items","splice","this","map","item","key","itemsStockSymbol","itemsStockName","itemsNoOfShares","itemsBuyPrice","itemsCurrentPrice","itemsProfitloss","className","onClick","Component","axios","require","default","AddStocks","addStockBtn","symbol","name","get","then","res","resp","data","today","Date","date","getDate","month","getMonth","wholeDate","getFullYear","console","log","day","getDay","current_Price","currentStockName","currentStockSymbol","todaysDate","currentPrice","document","querySelector","style","display","addEventListener","state","no_Of_Shares","buyingPrice","errorMessage","profitLoss","noShares","value","buyPrice","profitloss","push","id","float","textAlign","color","marginBottom","type","min","placeholder","width","addBtnClicked","bind","names","React","MyStocks","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f96445e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './AllStocks.css'\r\n\r\nclass AllStocks extends Component {    \r\n    stopTrackingButtonClicked = (event,index) => {\r\n        this.setState({\r\n            isClicked : true\r\n        })\r\n        this.props.items.splice(index,1);  \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tbody>\r\n                {this.props.items.map(item => {\r\n                    return (\r\n                        <tr key = {item.itemsStockSymbol}>\r\n                            <td>{item.itemsStockSymbol}</td>\r\n                            <td>{item.itemsStockName}</td>\r\n                            <td>{item.itemsNoOfShares}</td>\r\n                            <td>{item.itemsBuyPrice}</td>\r\n                            <td>{item.itemsCurrentPrice}</td>\r\n                            <td>{item.itemsProfitloss}</td>\r\n\r\n                            <td><button className=\"StopTrackingBtn\" onClick= {(event, index) => {this.stopTrackingButtonClicked(event, index)}}>x</button></td>\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>   \r\n        )\r\n    }\r\n}\r\n\r\nexport default AllStocks\r\n","import React from 'react'\r\nimport AllStocks from './AllStocks'\r\nimport './AddStocks.css'\r\n\r\nconst axios = require('axios').default;\r\nclass AddStocks extends React.Component {\r\n        constructor(props){\r\n            super(props);\r\n            this.state = {\r\n                resp : [],\r\n                currentStockName : '',\r\n                currentStockSymbol : '',\r\n                todaysDate: '',\r\n                no_Of_Shares : '',\r\n                buyingPrice : '',\r\n                errorMessage : '',\r\n                currentPrice : '',\r\n                profitLoss : '',\r\n                items: [],\r\n            }    \r\n        }\r\n\r\n    componentDidMount() {\r\n        axios.get(`https://financial-portfolio-trac-40940.firebaseio.com/mystocks.json`)\r\n            .then(res => {\r\n                const resp = res.data;\r\n                this.setState({resp})\r\n            });\r\n    } \r\n\r\n    addStockBtn = (symbol, name) => {\r\n        axios.get(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=HYM09DQLAGWQMN62`)\r\n            .then(res => {\r\n                const resp = res.data;\r\n                var today = new Date();\r\n                var date = today.getDate();\r\n                var month = today.getMonth() + 1;\r\n                if (date < 10)  {\r\n                    date = \"0\" + (date);\r\n                }\r\n\r\n                if (month < 10)  {\r\n                    month = \"0\" + (month);\r\n                }\r\n\r\n                var wholeDate = today.getFullYear() + '-' + (month) + '-' + (date);\r\n                console.log(wholeDate);\r\n                var day = today.getDay();\r\n\r\n                // For Saturday\r\n                if (day === 6) {\r\n                    wholeDate = today.getFullYear() + '-' + (month) + '-' + (date - 1);\r\n                    var current_Price = resp['Time Series (Daily)'][wholeDate]['1. open'];\r\n                }\r\n\r\n                // For Sunday\r\n                if (day === 0) {\r\n                    wholeDate = today.getFullYear() + '-' + (month) + '-' + (date - 2);\r\n                    current_Price = resp['Time Series (Daily)'][wholeDate]['1. open'];\r\n                }\r\n                \r\n                current_Price = resp['Time Series (Daily)'][wholeDate]['1. open'];\r\n                console.log(current_Price);\r\n \r\n                 this.setState({\r\n                    currentStockName : name,\r\n                    currentStockSymbol : symbol,\r\n                    todaysDate: wholeDate,\r\n                    currentPrice : current_Price\r\n                })\r\n\r\n            })\r\n            \r\n            document.querySelector(\".outerModal\").style.display=\"block\";\r\n\r\n            document.querySelector(\"#closeSymbol\").addEventListener('click', () => {\r\n                document.querySelector(\".outerModal\").style.display=\"none\";    \r\n            })\r\n    }\r\n\r\n    async addBtnClicked(){\r\n        let items = [...this.state.items];\r\n\r\n        var noShares = document.querySelector(\"#noShares\").value\r\n        console.log(noShares);\r\n\r\n        var buyPrice = document.querySelector(\"#buyPrice\").value\r\n        console.log(buyPrice);\r\n        \r\n        var profitloss = (this.state.currentPrice - buyPrice) * noShares;\r\n        console.log(profitloss);\r\n\r\n        if (noShares > 0 && buyPrice > 0) {            \r\n            await this.setState ({\r\n                no_Of_Shares : noShares,\r\n                buyingPrice : buyPrice,\r\n                profitLoss : profitloss,\r\n                errorMessage: ''\r\n            });\r\n\r\n            items.push({\r\n                itemsStockSymbol: this.state.currentStockSymbol,\r\n                itemsStockName: this.state.currentStockName,\r\n                itemsNoOfShares: this.state.no_Of_Shares,\r\n                itemsBuyPrice: this.state.buyingPrice,\r\n                itemsCurrentPrice: this.state.currentPrice,\r\n                itemsProfitloss: this.state.profitLoss\r\n              });\r\n\r\n            this.setState({\r\n                items\r\n            });\r\n\r\n            document.querySelector(\".outerModal\").style.display=\"none\"; \r\n            noShares = document.querySelector(\"#noShares\").value = '';\r\n            buyPrice = document.querySelector(\"#buyPrice\").value = '';\r\n        }\r\n\r\n        else {\r\n            this.setState({errorMessage : \"Please fill all the inputs\"})\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"AddStocksTitle\">\r\n                <table className=\"MyStocksTable\">\r\n                <AllStocks\r\n                    items={ this.state.items} \r\n                 />\r\n                </table>\r\n                <div className=\"outerModal\">\r\n                    <div className=\"mainModal\">\r\n                        <strong id=\"closeSymbol\" style = {{float: \"right\"}}>+</strong><br></br>\r\n                        <h1 style = {{textAlign: \"center\"}}>Add {this.state.currentStockName} to My Stocks</h1>\r\n                        <h4 style = {{textAlign: \"center\", color: \"red\"}}>{this.state.errorMessage}</h4>\r\n                        <strong style = {{textAlign: \"left\", marginBottom:'1%'}}>Company Name: </strong><span style = {{float: \"right\" }}>{this.state.currentStockName}</span><br></br>\r\n\r\n                        <strong style = {{textAlign: \"left\", marginBottom:'1%'}}>No. of Shares: </strong><input style = {{float: \"right\"}} type=\"number\" min=\"1\" placeholder=\"No. of Shares\" id=\"noShares\"/><br></br>\r\n\r\n                        <strong style = {{textAlign: \"left\", marginBottom:'1%'}}>Buy Price: </strong><input style = {{float: \"right\"}} type=\"number\" min=\"1\" placeholder=\"Buying Price\" id=\"buyPrice\"/><br></br>\r\n\r\n                        <strong style = {{textAlign: \"left\", marginBottom:'1%'}}>Buy Date: </strong><input id=\"buyDate\" style = {{float: \"right\"}} type=\"date\" value={this.state.todaysDate} /><br></br>\r\n\r\n                        <div style = {{textAlign: \"center\"}}><button id=\"addBtn\" type=\"submit\" className=\"AddButton\" style = {{width: \"10%\"}} onClick={this.addBtnClicked.bind(this)}>Add</button></div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <h3>Add Stocks to my Stocks</h3>\r\n                </div>\r\n                    <ul>\r\n                        {this.state.resp.map((names) => <li key={names.symbol}><button style={{\"width\":\"100px\"}} className=\"StockButton\"\r\n                        onClick={(symbol, name) => this.addStockBtn(names.symbol, names.name)}>{names.symbol}</button> {names.name}</li>)}\r\n                   </ul>  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddStocks","import React, { Component } from 'react'\r\nimport './MyStocks.css';\r\nimport AddStocks from './AddStocks'\r\n\r\nclass MyStocks extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"MyStocks\">\r\n                <h3>My Stocks</h3>\r\n                <table className=\"MyStocksTable\">\r\n                    <thead>\r\n                        <tr className=\"stockHeader\">\r\n                            <th>Stock symbol</th>\r\n                            <th>Stock name</th>\r\n                            <th>No.of shares</th>\r\n                            <th>Buy price</th>\r\n                            <th>Current price</th>\r\n                            <th>Profit/Loss</th>\r\n                            <th>Stop Tracking</th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n                <AddStocks/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyStocks\r\n","import React from 'react';\nimport './App.css';\nimport MyStocks from  './components/MyStocks'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <strong>FInancial Portfolio Tracker</strong>\n      </div>\n      <MyStocks/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}